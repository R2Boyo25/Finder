#include <gmodule.h>
#include <gtk/gtk.h>

#include <array>
#include <cstdio>
#include <iostream>
#include <memory>
#include <regex>
#include <sstream>
#include <stdexcept>
#include <string>
#include <vector>

std::string exec(const char *cmd) {
  std::array<char, 128> buffer;
  std::string result;
  std::unique_ptr<FILE, decltype(&pclose)> pipe(popen(cmd, "r"), pclose);
  if (!pipe) {
    throw std::runtime_error("popen() failed!");
  }
  while (fgets(buffer.data(), buffer.size(), pipe.get()) != nullptr) {
    result += buffer.data();
  }
  return result;
}

GtkBuilder *builder = NULL;

// Handle the user trying to close the window
gboolean windowDelete(__attribute__((unused)) GtkWidget *widget,
                      __attribute__((unused)) GdkEvent *event,
                      __attribute__((unused)) gpointer data) {
  g_print("%s called.\n", __FUNCTION__);
  return TRUE; // Returning TRUE stops the window being deleted.
               // Returning FALSE allows deletion.
}

std::vector<std::string> splitString(const std::string &str) {
  std::vector<std::string> tokens;

  std::stringstream ss(str);
  std::string token;
  while (std::getline(ss, token, '\n')) {
    tokens.push_back(token);
  }

  return tokens;
}

void clearContainer(GtkWidget *container) {
  GList *children, *iter;

  children = gtk_container_get_children(GTK_CONTAINER(container));
  for (iter = children; iter != NULL; iter = g_list_next(iter))
    gtk_widget_destroy(GTK_WIDGET(iter->data));
  g_list_free(children);
}

extern "C" G_MODULE_EXPORT void
getSearch(__attribute__((unused)) GtkWidget *widget,
          __attribute__((unused)) GdkEvent *event,
          __attribute__((unused)) gpointer data) {
  const char *content = gtk_entry_get_text(GTK_ENTRY(widget));

  clearContainer(GTK_WIDGET(gtk_builder_get_object(builder, "DisplayBox")));

  std::regex empty("^\\s*$");

  if (std::regex_match(content, empty)) {
    return;
  }

  // g_print("%s\n", content);
  GtkListBox *box = GTK_LIST_BOX(gtk_builder_get_object(builder, "DisplayBox"));

  // gtk_list_store_clear(gtk_list_box_get_selected_row(box))

  std::string command =
      std::string(&"find . -wholename '*"[0]) + content + "*'";

  std::string rawfiles = exec(command.c_str());

  std::vector<std::string> files = splitString(rawfiles);

  for (auto &file : files) {
    GtkWidget *label = gtk_label_new(file.c_str());

    gtk_widget_show(label);

    gtk_list_box_insert(box, label, -1);
  }
}

const char *GetItemLabel(GtkWidget *widget) {
  GtkWidget *label = NULL;
  const char *str = NULL;
  GList *children;
  GtkWidget *child;

  /* --- Get list of children in the list item --- */
  children = gtk_container_get_children(GTK_CONTAINER(widget));

  /* --- Get the widget --- */
  child = GTK_WIDGET(children->data);

  /* --- If the widget is a label --- */
  if (GTK_IS_LABEL(child)) {

    /* --- Get the string in the label --- */
    str = gtk_label_get_text(GTK_LABEL(child));
  }

  /* --- Return the string --- */
  return str;
}

std::string getDirectory(std::string file) {
  std::string directory;
  const size_t last_slash_idx = file.rfind('/');
  if (std::string::npos != last_slash_idx) {
    directory = file.substr(0, last_slash_idx);
  }

  return directory;
}

extern "C" G_MODULE_EXPORT void
openFile(__attribute__((unused)) GtkWidget *widget,
         __attribute__((unused)) GdkEvent *event,
         __attribute__((unused)) gpointer data) {
  /*GtkListBoxRow *w = gtk_list_box_get_selected_row(GTK_LIST_BOX(widget));*/

  int r = system((std::string("xdg-open \"") +
                  GetItemLabel(GTK_WIDGET(
                      gtk_list_box_get_selected_row(GTK_LIST_BOX(widget)))) +
                  "\"")
                     .c_str());
  gtk_main_quit();
}

int main(int argc, char **argv) {
  GtkWidget *window;
  gtk_init(&argc, &argv);
  builder = gtk_builder_new();

  if (gtk_builder_add_from_file(
          builder, (getDirectory(argv[0]) + "/Glade/FileSearch.glade").c_str(),
          NULL) == 0) {
    printf("gtk_builder_add_from_file FAILED\n");
    return (0);
  }

  window = GTK_WIDGET(gtk_builder_get_object(builder, "FileSearchDialog"));
  gtk_builder_connect_signals(builder, NULL);
  gtk_widget_show_all(window);
  gtk_main();
  return 0;
}